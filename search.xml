<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>awk 命令详解(2) ：awk分隔符</title>
    <url>/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3-2/</url>
    <content><![CDATA[<p>在前一篇文章中我们略微提到过”分隔符”，但是并没有细说，那么我们今天就聊聊什么是分隔符，awk有哪些分隔符，awk的默认分割符是空格，但是，这样描述并不精确，因为，awk的分隔符还分为两种，”输入分隔符” 和 “输出分隔符” 。</p>
<a id="more"></a>

<p>此处我们先将分隔符的概念列出，看不懂没关系，我们会一一进行举例，到时自然会明白。</p>
<p>输入分隔符，英文原文为field separator，此处简称为FS</p>
<p>输入分割符，默认是空白字符(即空格)，awk默认以空白字符为分隔符对每一行进行分割。</p>
<p>输出分割符，英文原文为output field separator，此处简称为OFS</p>
<p>awk将每行分割后，输出在屏幕上的时候，以什么字符作为分隔符，awk默认的输出分割符也是空格。</p>
<p>光看概念是不是不容易搞明白？没关系，我们来动手实践一下，胜过千言万语。</p>
<h2 id="输入分隔符"><a href="#输入分隔符" class="headerlink" title="输入分隔符"></a>输入分隔符</h2><p>我们现在通过一些小例子，搞明白这两个分隔符的作用，不过我们要一个一个来，我们先看一些”输入分隔符”的小例子</p>
<p>输入分隔符比较容易理解，当awk逐行处理文本的时候，以输入分隔符为准，将文本切成多个片段，默认使用空格，但是，如果一段文字中没有空格，我们可以指定以特定的文字或符号作为输入分割符，比如下图中的例子，我们指定使用”#”作为输入分隔符。</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3-2/032217_0609_1.png" alt="awk从放弃到入门（2）：awk分隔符"></p>
<p>上图中，我们使用了-F 选项，指定了使用#号作为输入分隔符，于是，awk将每一行都通过#号为我们分割了。</p>
<p>除了使用 -F 选项指定输入分隔符，还能够通过设置内部变量的方式，指定awk的输入分隔符，awk内置变量FS可以用于指定输入分隔符，但是在使用变量时，需要使用-v选项，用于指定对应的变量，比如 -v FS=’#’，如下图</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3-2/032217_0609_2.png" alt="awk从放弃到入门（2）：awk分隔符"></p>
<p>其实不管是通过-F选项，还是通过FS这个内置变量，目的都是设置指定的输入分隔符，达到的效果是相同的，我们会在另一篇文章中单独对awk的变量进行总结，如果你不理解这些变量，没有关系，后面自然会明白。</p>
<p>而此处，我们使用了awk中的一个选项，就是-F，还记得我们之前总结的awk的使用语法吗。</p>
<p>我们说过，awk的语法如下</p>
<p>awk [options] ‘Pattern{Action}’ file</p>
<p>而-F，就是options的一种，用于指定输入分隔符。</p>
<p>-v也是options的一种，用于设置变量的值。</p>
<p>再结合之前的文章，我们已经将options 、pattern 、action都简单的应用了一遍，好了，我们已经”会用”awk了。</p>
<h2 id="输出分隔符"><a href="#输出分隔符" class="headerlink" title="输出分隔符"></a>输出分隔符</h2><p>那么什么是输出分隔符呢？聪明的你应该已经发现了，当awk为我们输出每一列的时候，会使用空格隔开每一列，其实，这个空格，就是awk的默认的输出分隔符，下图中红线标注的空格部分，就是awk的默认的输出分隔符。</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3-2/032217_0609_3.png" alt="awk从放弃到入门（2）：awk分隔符"></p>
<p>输出分割符的意思就是：当我们要对处理完的文本进行输出的时候，以什么文本或符号作为分隔符。</p>
<p>我们可以使用awk的内置变量OFS来设定awk的输出分隔符，当然，使用变量的时候要配合使用-v选项，示例如下</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3-2/032217_0609_4.png" alt="awk从放弃到入门（2）：awk分隔符"></p>
<p>现在，我们可以同时指定输入分隔符和输出分割符了，示例如下</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3-2/032217_0609_5.png" alt="awk从放弃到入门（2）：awk分隔符"></p>
<p>我们刚才解释了awk的输出分隔符，如果，在输出的时候，我们想要让两列合并在一起显示，不使用输出分隔符分开显示，该怎么做呢？如下图所示，蓝线之上使用默认的输出分隔符进行了分隔，而蓝线之下的两种方法均未使用输出分隔符进行分隔，而是将两列合在一起显示了。</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3-2/032217_0609_6.png" alt="awk从放弃到入门（2）：awk分隔符"></p>
<p>细心如你一定发现了，上图中的示例在语法上的区别就是，一个有”逗号”，一个没有”逗号”。</p>
<p>awk ‘{print $1 $2}’ 表示每行分割后，将第一列（第一个字段）和第二列（第二个字段）连接在一起输出。</p>
<p>awk ‘{print $1,$2}’ 表示每行分割后，将第一列（第一个字段）和第二列（第二个字段）以输出分隔符隔开后显示。</p>
<p>好了，awk的分隔符就总结到这里，希望这篇文章能对你有所帮助。</p>
]]></content>
      <tags>
        <tag>awk</tag>
      </tags>
  </entry>
  <entry>
    <title>awk 命令详解(1)</title>
    <url>/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>我们先来用专业的术语描述一下awk是什么，如果你看不懂，没关系，我们会再用”大白话”解释一遍。</p>
<a id="more"></a>

<p>awk是一个报告生成器，它拥有强大的文本格式化的能力，这就是专业的说法。</p>
<p>你可能不理解所谓的报告生成器中的”报告”是什么，你可以把”报告”理解为”报表”或者”表格”,也就是说，我们可以利用awk命令，将一些文本整理成我们想要的样子，比如把一些文本整理成”表”的样子，然后再展示出来，刚才概念中提到的”文本格式化的能力”，也就是这个意思，其实这样说可能还是不太容易理解，不用着急，当你看到后面的”示例”时，自然会明白awk所擅长的”文本格式化”能力是什么。</p>
<p>awk是由Alfred Aho 、Peter Weinberger 和 Brian Kernighan这三个人创造的，awk由这个三个人的姓氏的首个字母组成。</p>
<p>awk早期是在unix上实现的，所以，我们现在在linux的所使用的awk其实是gawk，也就是GNU awk，简称为gawk，awk还有一个版本，New awk，简称为nawk，但是linux中最常用的还是gawk。</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/031917_1155_1.png" alt="awk从放弃到入门（1）：awk基础 （通俗易懂，快进来看）"></p>
<p>awk其实是一门编程语言，它支持条件判断、数组、循环等功能。所以，我们也可以把awk理解成一个脚本语言解释器。</p>
<p>grep 、sed、awk被称为linux中的”三剑客”。</p>
<p>我们总结一下这三个”剑客”的特长。</p>
<p>grep 更适合单纯的查找或匹配文本</p>
<p>sed  更适合编辑匹配到的文本</p>
<p>awk  更适合格式化文本，对文本进行较复杂格式处理</p>
<p>此处，我们只总结 awk</p>
<h2 id="awk基础"><a href="#awk基础" class="headerlink" title="awk基础"></a>awk基础</h2><p>awk基本语法如下，看不懂没关系，我们会慢慢举例。</p>
<p>awk [options] ‘program’ file1 , file2 , ```</p>
<p>对于上述语法中的program来说，又可以细分成pattern和action，也就是说，awk的基本语法如下</p>
<p>awk [options] ‘Pattern{Action}’ file</p>
<p>从字面上理解 ，action指的就是动作，awk擅长文本格式化，并且将格式化以后的文本输出，所以awk最常用的动作就是print和printf，因为awk要把格式化完成后的文本输出啊，所以，这两个动作最常用。</p>
<p>我们先从最简单用法开始了解awk，我们先不使用[options] ,也不指定pattern，直接使用最简单的action，从而开始认识awk，示例如下</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/031917_1155_2.png" alt="awk从放弃到入门（1）：awk基础 （通俗易懂，快进来看）"></p>
<p>上图中，我们只是使用awk执行了一个打印的动作，将testd文件中的内容打印了出来。</p>
<p>好了，现在，我们来操作一下另一个类似的场景。</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/031917_1155_3.png" alt="awk从放弃到入门（1）：awk基础 （通俗易懂，快进来看）"></p>
<p>上图中的示例没有使用到options和pattern，上图中的awk ‘{print $5}’，表示输出df的信息的第5列，$5表示将当前行按照分隔符分割后的第5列，不指定分隔符时，默认使用空格作为分隔符，细心的你一定发现了，上述信息用的空格不止有一个，而是有连续多个空格，awk自动将连续的空格理解为一个分割符了，是不是比cut命令要简单很多，这样比较简单的例子，有利于我们开始了解awk。</p>
<p>awk是逐行处理的，逐行处理的意思就是说，当awk处理一个文本时，会一行一行进行处理，处理完当前行，再处理下一行，awk默认以”换行符”为标记，识别每一行，也就是说，awk跟我们人类一样，每次遇到”回车换行”，就认为是当前行的结束，新的一行的开始，awk会按照用户指定的分割符去分割当前行，如果没有指定分割符，默认使用空格作为分隔符。</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/031917_1155_4.png" alt="awk从放弃到入门（1）：awk基础 （通俗易懂，快进来看）"></p>
<p>$0 表示显示整行 ，$NF表示当前行分割后的最后一列（$0和$NF均为内置变量）</p>
<p>注意，$NF 和 NF 要表达的意思是不一样的，对于awk来说，$NF表示最后一个字段，NF表示当前行被分隔符切开以后，一共有几个字段。</p>
<p>也就是说，假如一行文本被空格分成了7段，那么NF的值就是7，$NF的值就是$7,  而$7表示当前行的第7个字段，也就是最后一列，那么每行的倒数第二列可以写为$(NF-1)。</p>
<p>我们也可以一次输出多列，使用逗号隔开要输出的多个列，如下，一次性输出第一列和第二列</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/031917_1155_5.png" alt="awk从放弃到入门（1）：awk基础 （通俗易懂，快进来看）"></p>
<p>同理，也可以一次性输出多个指定的列，如下图</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/031917_1155_6.png" alt="awk从放弃到入门（1）：awk基础 （通俗易懂，快进来看）"></p>
<p>我们发现，第一行并没有第5列，所以并没有输出任何文本，而第二行有第五列，所以输出了。</p>
<p>除了输出文本中的列，我们还能够添加自己的字段，将自己的字段与文件中的列结合起来，如下做法，都是可以的。</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/031917_1155_7.png" alt="awk从放弃到入门（1）：awk基础 （通俗易懂，快进来看）"></p>
<p>从上述实验中可以看出，awk可以灵活的将我们指定的字符与每一列进行拼接，或者把指定的字符当做一个新列插入到原来的列中，也就是awk格式化文本能力的体现。</p>
<p>但是要注意，$1这种内置变量的外侧不能加入双引号，否则$1会被当做文本输出，示例如下</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/031917_1155_8.png" alt="awk从放弃到入门（1）：awk基础 （通俗易懂，快进来看）"></p>
<p>我们也可以输出整行，比如，如下两种写法都表示输出整行。</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/031917_1155_9.png" alt="awk从放弃到入门（1）：awk基础 （通俗易懂，快进来看）"></p>
<p>我们说过，awk的语法如下</p>
<p>awk [options] ‘Pattern{Action}’ file</p>
<p>而且我们说过awk是逐行处理的， 刚才已经说过了最常用的Action：print</p>
<p>现在，我们来认识下一Pattern，也就是我们所说的模式</p>
<p>不过，我们准备先把awk中最特殊的模式展示给大家，以后再介绍普通的模式，因为普通模式需要的篇幅比较长，所以我们先来总结特殊模式。</p>
<p>AWK 包含两种特殊的模式：BEGIN 和 END。</p>
<p>BEGIN 模式指定了处理文本之前需要执行的操作：</p>
<p>END 模式指定了处理完所有行之后所需要执行的操作：</p>
<p>什么意思呢？光说不练不容易理解，我们来看一些小例子，先从BEGIN模式开始，示例如下</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/031917_1155_10.png" alt="awk从放弃到入门（1）：awk基础 （通俗易懂，快进来看）"></p>
<p>上述写法表示，在开始处理test文件中的文本之前，先执行打印动作，输出的内容为”aaa”,”bbb”.</p>
<p>也就是说，上述示例中，虽然指定了test文件作为输入源，但是在开始处理test文本之前，需要先执行BEGIN模式指定的”打印”操作</p>
<p>既然还没有开始逐行处理test文件中的文本，那么是不是根本就不需要指定test文件呢，我们来试试。</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/031917_1155_11.png" alt="awk从放弃到入门（1）：awk基础 （通俗易懂，快进来看）"></p>
<p>经过实验发现，还真是，我们并没有给定任何输入来源，awk就直接输出信息了，因为，BEGIN模式表示，在处理指定的文本之前，需要先执行BEGIN模式中指定的动作，而上述示例没有给定任何输入源，但是awk还是会先执行BEGIN模式指定的”打印”动作，打印完成后，发现并没有文本可以处理，于是就只完成了”打印 aaa bbb”的操作。</p>
<p>这个时候，如果我们想要awk先执行BEGIN模式指定的动作，再根据执我们自定义的动作去操作文本，该怎么办呢？示例如下</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/031917_1155_12.png" alt="awk从放弃到入门（1）：awk基础 （通俗易懂，快进来看）"></p>
<p>上图中，蓝色标注的部分表示BEGIN模式指定的动作，这部分动作需要在处理指定的文本之前执行，所以，上图中先打印出了”aaa bbb”，当BEGIN模式对应的动作完成后，在使用后面的动作处理对应的文本，即打印test文件中的第一列与第二列，这样解释应该比较清楚了吧。</p>
<p>看完上述示例，似乎更加容易理解BEGIN模式是什么意思了，BEGIN模式的作用就是，在开始逐行处理文本之前，先执行BEGIN模式所指定的动作。以此类推，END模式的作用就一目了然了，举例如下。</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/031917_1155_13.png" alt="awk从放弃到入门（1）：awk基础 （通俗易懂，快进来看）"></p>
<p>聪明如你一定明白了，END模式就是在处理完所有的指定的文本之后，需要指定的动作。</p>
<p>那么，我们可以结合BEGIN模式和END模式一起使用。示例如下</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/031917_1155_14.png" alt="awk从放弃到入门（1）：awk基础 （通俗易懂，快进来看）"></p>
<p>上述示例中返回的结果有没有很像一张”报表”，有”表头”  、”表内容”、  “表尾”，awk对文本的格式化能力你体会到了吗？</p>
]]></content>
      <tags>
        <tag>awk</tag>
      </tags>
  </entry>
  <entry>
    <title>awk 命令详解之变量</title>
    <url>/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E4%B9%8B%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<p>在阅读这篇文章之前，最好先阅读之前的文章，以之前的知识点作为基础，再看这篇文章会容易理解很多。</p>
<p>之前的文章在使用到”输入分隔符”和”输出分隔符”的时候，我们都提到了一个名词：”变量”。</p>
<p>这篇文章我们就来详细的总结一下awk中的变量，我们会先对概念进行描述，如果概念中有不明白的地方，不要着急，对应其示例，你自然就会明白。</p>
<p>对于awk来说”变量”又分为”内置变量” 和 “自定义变量” , “输入分隔符FS”和”输出分隔符OFS”都属于内置变量。</p>
<p>内置变量就是awk预定义好的、内置在awk内部的变量，而自定义变量就是用户定义的变量。</p>
<p>我们先看看awk常用的一些内置变量，此处先大致列出其概念，只看概念并不容易理解其意思，不懂没关系，等到示例时你自然会明白。</p>
<p>awk常用的内置变量以及其作用如下</p>
<p>FS：输入字段分隔符， 默认为空白字符</p>
<p>OFS：输出字段分隔符， 默认为空白字符</p>
<p>RS：输入记录分隔符(输入换行符)， 指定输入时的换行符</p>
<p>ORS：输出记录分隔符（输出换行符），输出时用指定符号代替换行符</p>
<p>NF：number of Field，当前行的字段的个数(即当前行被分割成了几列)，字段数量</p>
<p>NR：行号，当前处理的文本行的行号。</p>
<p>FNR：各文件分别计数的行号</p>
<p>FILENAME：当前文件名</p>
<p>ARGC：命令行参数的个数</p>
<p>ARGV：数组，保存的是命令行所给定的各参数</p>
<p>上面描述到的”输入字段分隔符FS和输出字段分隔符OFS在之前的文章中已经解释过了，字段数量NF也大致说了。</p>
<p>RS、ORS、NR、FNR、FILENAME、ARGC、ARGV这些术语对于我们来说是新接触的，但是触类旁通，RS其实与FS类似，ORS与OFS类似，FS是字段输入分隔符，RS是行输入分隔符，OFS是字段输出分隔符，ORS是行输出分隔符，它们的原理都很相似。不要着急，我们来慢慢解释</p>
<h2 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h2><h3 id="内置变量NR"><a href="#内置变量NR" class="headerlink" title="内置变量NR"></a>内置变量NR</h3><p>NR比较简单，我们先看NR的例子。</p>
<p>首先，如下图所示，test1文件中一共有两行文本，使用空格隔开，第1行有4列，第2行有5列</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E4%B9%8B%E5%8F%98%E9%87%8F/032417_0046_1.png" alt="awk从放弃到入门（3）：awk变量"></p>
<p>而内置变量NR表示每一行的行号，内置变量NF表示每一行中一共有几列，那么，也就是说，我们可以通过下例中的方法，得到test1文本中，每一行的行号以及每一行对应的列的数量。</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E4%B9%8B%E5%8F%98%E9%87%8F/032417_0046_2.png" alt="awk从放弃到入门（3）：awk变量"></p>
<p>或者，利用NR内置变量，先打印出行号，再打印出整行的内容，相当于为test1中的每一行都添加了行号以后再进行输出，示例如下。</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E4%B9%8B%E5%8F%98%E9%87%8F/032417_0046_3.png" alt="awk从放弃到入门（3）：awk变量"></p>
<p>好了，现在每一行的开头都有行号了，简单吧。</p>
<p>细心如你一定注意到了一个细节，就是在打印 $0 , $1 , $2 这些内置变量的时候，都有使用到”$”符号，但是在调用 NR , NF 这些内置变量的时候，就没有使用”$”，如果你有点不习惯，那么可能是因为你已经习惯了使用bash的语法去使用变量，在bash中，我们在引用变量时，都会使用$符进行引用，但是在awk中，只有在引用$0、$1等内置变量的值的时候才会用到”$”,引用其他变量时，不管是内置变量，还是自定义变量，都不使用”$”,而是直接使用变量名。</p>
<h3 id="内置变量FNR"><a href="#内置变量FNR" class="headerlink" title="内置变量FNR"></a>内置变量FNR</h3><p>FNR这个内置变量是什么意思呢？我们一起来看看。</p>
<p>当我们使用awk同时处理多个文件，并且使用NR显示行号的时候，效果如下图。</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E4%B9%8B%E5%8F%98%E9%87%8F/032417_0046_4.png" alt="awk从放弃到入门（3）：awk变量"></p>
<p>从返回结果可以看出，awk处理多个文件的时候，如果使用NR显示行号，那么，多个文件的所有行会按照顺序进行排序。</p>
<p>可是，如果我们想要分别显示两个文件的行号，该怎么办呢，这个时候就会用到内置变量FNR，效果如下。</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E4%B9%8B%E5%8F%98%E9%87%8F/032417_0046_5.png" alt="awk从放弃到入门（3）：awk变量"></p>
<p>我想，对比完上述两个示例，你肯定明白了FNR内置变量的作用，没错，它的作用就是当awk处理多个文件时，分别对每个文件的行数进行计数。</p>
<h3 id="内置变量RS"><a href="#内置变量RS" class="headerlink" title="内置变量RS"></a>内置变量RS</h3><p>现在，我们来看看RS这个变量，我们说了，RS是输入行分隔符，如果不指定，默认的”行分隔符”就是我们所理解的”回车换行”。</p>
<p>假设，我们不想以默认的”回车换行”作为”行分隔符”，而是想使用空格作为所谓的行分隔符，也就是说，我们想让awk认为，每遇到一个空格，就换行，换句话说，我们想让awk以为每次遇到一个空格就是新的一行。那么我们该怎么做呢？示例如下。</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E4%B9%8B%E5%8F%98%E9%87%8F/032417_0046_6.png" alt="awk从放弃到入门（3）：awk变量"></p>
<p>如上图所示，我们先使用了默认的”回车换行”作为”行分隔符”输出了test1文本，这时显示文本一共有2行。</p>
<p>而后来，我们又指定了使用”空格”作为”行分隔符”输出test1文本，这时显示文本一共有8行。</p>
<p>看到了吗？当我们指定使用空格作为”行分隔符”时，在awk解析文本时，每当遇到空格，awk就认为遇到的空格是换行符，于是awk就将文本换行了，而此时人类理解的”回车换行”，对于awk来说并不是所谓的换行符，所以才会出现上图中第4行的现象，即使从人类的角度去看是两行文本，但是在awk的世界观里，它就是一行。</p>
<p>如果你还是没有理解，那么我们换个方式描述，再来啰嗦一遍。</p>
<p>默认情况下，awk使用”回车换行”作为”行分隔符(换行符)”，此时，人类的世界观与awk的世界观是一致的，因为我们和awk都认为，遇到回车换行，就表示当前行结束，开始新的一行。</p>
<p>而当我们指定了特定的”行分隔符”时，比如空格，那么当awk遇到空格时，就认为当前行结束了，新的一行开始了，此时，awk的世界观与人类的世界观已经不同，人类仍然认为”回车换行”才是新的一行，awk却认为”回车换行”并不是新的一行的开始，所以，从上图中返回的信息中，我们可以看到，人类所以为的”两行”，共用了一个行号，awk认为它们就是第4行。</p>
<p>这就是输入行分隔符的使用方法。同理，我们来看看”输出行分隔符”，理解输出行分隔符之前，请做好心理准备，最好不要以正常的思维去理解换行，才能比较容易的学明白输出行分隔符。</p>
<h3 id="内置变量ORS"><a href="#内置变量ORS" class="headerlink" title="内置变量ORS"></a>内置变量ORS</h3><p>在理解”输出行分隔符”ORS之前，请先理解刚才描述的”输入行分隔符”RS，否则理解起来可能比较困难。</p>
<p>默认情况下，awk将人类眼中的”回车换行”，当做”输出行分隔符”，此时，awk的”世界观”与人类的”世界观”是相同的。</p>
<p>现在，我们改变一下awk的想法，我们让awk认为，”+++”才是真正的输出行分隔符，示例如下图</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E4%B9%8B%E5%8F%98%E9%87%8F/032417_0046_7.png" alt="awk从放弃到入门（3）：awk变量"></p>
<p>看懂了吗，我们再啰嗦的解释一遍，在没有指定输出行分隔符之前，awk跟人类的逻辑思维是一样一样的，当人类想要换行的时候，就会”另起一行”（回车换行），awk也是一样的，当它在输出文字的时候，如果想要换行，就会”另起一行”（回车换行）, 可是，如果我们指定了”输出行分隔符”为”+++”,那么，当awk在输出文字的时候，如果想要换行，就会”另起一行”（+++），所以，对于awk来说，它完成了”另起一行”的动作，只不过，它所认为的”另起一行”的动作就是输出”+++”,而不再是原来的输出” 回车换行”，所以，从人类看到的”表象上”，awk并没有换行，那是因为我们还是以”回车换行”作为换行的标准，而awk已经变了，它认为,”+++”就是换行的标准。</p>
<p>这次明白了吧，真的明白了吗？</p>
<p>我们把刚才学到的”输入换行符”和”输出换行符”同时使用，看看是什么效果，示例如下。</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E4%B9%8B%E5%8F%98%E9%87%8F/032417_0046_8.png" alt="awk从放弃到入门（3）：awk变量"></p>
<p>如果你能明白awk为什么会将test1的文本输出成上图中的模样，那么你已经彻底理解了RS与ORS两个内置变量。</p>
<p>如果你又懵逼了，那么，从RS内置变量开始，再看一遍吧。</p>
<h3 id="内置变量FILENAME"><a href="#内置变量FILENAME" class="headerlink" title="内置变量FILENAME"></a>内置变量FILENAME</h3><p>FILENAME这个内置变量，从字面上，就能看出是什么意思，没错，就是显示文件名，演示效果如下。</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E4%B9%8B%E5%8F%98%E9%87%8F/032417_0046_9.png" alt="awk从放弃到入门（3）：awk变量"></p>
<h3 id="内置变量ARGC与ARGV"><a href="#内置变量ARGC与ARGV" class="headerlink" title="内置变量ARGC与ARGV"></a>内置变量ARGC与ARGV</h3><p>ARGC内置变量表示命令行参数的个数，什么意思呢？我们先不解释ARGC，先看看ARGV是什么。</p>
<p>别眼花了。</p>
<p>一个是ARGC，</p>
<p>一个是ARGV，</p>
<p>先说说ARGV。</p>
<p>ARGV内置变量表示的是一个数组，这个数组中保存的是命令行所给定的参数。这样解释还是很模糊，不容易理解，我们来看看示例。</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E4%B9%8B%E5%8F%98%E9%87%8F/032417_0046_10.png" alt="awk从放弃到入门（3）：awk变量"></p>
<p>上图中，我们先使用BEGIN模式，输出一个字符串”aaa”，然后，传入两个文件的文件名作为参数，我们发现，BEGIN模式正常执行了打印操作，输出了”aaa”字符串 ，我们使用同样的命令，同样使用BEGIN模式，只不过，这次不只打印”aaa”,还打印ARGV这个数组中的第二个元素的值。</p>
<p>我说已经说过，ARGV内置变量表示的是一个数组，既然是数组，就需要用上图中的下标的方式，引用对应元素的值，因为数组的索引都是从0开始的，所以，ARGV[1]表示引用ARGV数组中的第二个元素的值，从返回结果可以看出，ARGV[1]对应的值为test1，同理，我们又使用第三条命令，多打印了一个ARGV[2]的值，发现ARGV[2]对应的值为test2，这个时候，你明白ARGV内置变量的含义了吗，说白了，ARGV内置变量表示的是：所有参数组成的数组。那么细心的你一定会问了，ARGV[0]对应的是哪个参数呢，我们来打印一下。</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E4%B9%8B%E5%8F%98%E9%87%8F/032417_0046_11.png" alt="awk从放弃到入门（3）：awk变量"></p>
<p>我擦，第一个参数竟然是awk这个命令本身？？太神奇了，有没有很出乎意料···</p>
<p>好吧，awk就是这么规定的，’pattern{ action }’并不被看做是参数，awk被看做为参数。</p>
<p>好了，说明了ARGV变量以后，再说ARGC变量的作用，就容易多了。</p>
<p>在刚才的例子中，应该有三个参数，awk、test1、test2，这三个参数作为数组的元素存放于ARGV中，现在，而ARGC则表示参数的数量，也可以理解为ARGV数组的长度。示例如下</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E4%B9%8B%E5%8F%98%E9%87%8F/032417_0046_12.png" alt="awk从放弃到入门（3）：awk变量"></p>
<h2 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h2><p>好了，内置变量解释完了，现在我们来看看自定义变量，自定义变量，顾名思义，就是用户定义的变量，有两种方法可以自定义变量。</p>
<p>方法一：-v varname=value  变量名区分字符大小写。</p>
<p>方法二：在program中直接定义。</p>
<p>我们来看一些小例子，即可明白上述两种方法。</p>
<p>通过方法一自定义变量。</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E4%B9%8B%E5%8F%98%E9%87%8F/032417_0046_13.png" alt="awk从放弃到入门（3）：awk变量"></p>
<p>这种方式，与设置内置变量的值的方法是一样的。</p>
<p>使用方法二自定义变量，直接在program中定义即可，但是注意，变量定义与动作之间需要用分号”;”隔开。</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E4%B9%8B%E5%8F%98%E9%87%8F/032417_0046_14.png" alt="awk从放弃到入门（3）：awk变量"></p>
<p>当然，我们也可以一次性定义多个变量</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E4%B9%8B%E5%8F%98%E9%87%8F/032417_0046_15.png" alt="awk从放弃到入门（3）：awk变量"></p>
<p>第一种方法虽然看上去比较麻烦，但是这种方法也有自己的优势</p>
<p>当我们需要在awk中引用shell中的变量的时候，则可以通过方法一间接的引用。举例如下</p>
<p><img src="/2020/07/31/awk-%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3%E4%B9%8B%E5%8F%98%E9%87%8F/032417_0046_16.png" alt="awk从放弃到入门（3）：awk变量"></p>
<p>好了，awk中变量的使用方法就暂时总结到这里，希望这篇文章会对你有所帮助。</p>
]]></content>
      <tags>
        <tag>awk</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2020/07/31/draft/</url>
    <content><![CDATA[<h3 id="匹配空行"><a href="#匹配空行" class="headerlink" title="匹配空行"></a>匹配空行</h3><p><code>grep &quot;^$&quot;</code></p>
<h3 id="匹陪m结尾的行"><a href="#匹陪m结尾的行" class="headerlink" title="匹陪m结尾的行"></a>匹陪m结尾的行</h3><p><code>grep &quot;m$&quot;</code></p>
<h3 id="删除行尾空格"><a href="#删除行尾空格" class="headerlink" title="删除行尾空格"></a>删除行尾空格</h3><p><code>sed -i &#39;s/[]*$//g&#39; filename</code></p>
<h3 id="输出行尾的-符号"><a href="#输出行尾的-符号" class="headerlink" title="输出行尾的$符号"></a>输出行尾的$符号</h3><p><code>cat -An filename</code></p>
<h3 id="排除空行"><a href="#排除空行" class="headerlink" title="排除空行"></a>排除空行</h3><p><code>grep -v &#39;^$&#39; filename</code></p>
]]></content>
  </entry>
  <entry>
    <title>hexo上传本地图片的解决方法</title>
    <url>/2020/07/31/hexo%E4%B8%8A%E4%BC%A0%E6%9C%AC%E5%9C%B0%E5%9B%BE%E7%89%87%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>最近重新开始用起hexo，但是发现在文章中引用本地图片时总是显示不出来。</p>
<h3 id="一、插件安装与配置"><a href="#一、插件安装与配置" class="headerlink" title="一、插件安装与配置"></a>一、插件安装与配置</h3><p>首先我们需要安装一个图片路径转换的插件，这个插件名字是<strong>hexo-asset-image</strong></p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image --save</span><br><span class="line">1</span><br></pre></td></tr></table></figure>

<p>但是这个插件的内容需要修改【不然可能会出Bug】</p>
<p>打开/node_modules/hexo-asset-image/index.js，将内容更换为下面的代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">        <span class="keyword">var</span> link = data.permalink;</span><br><span class="line">    <span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>)</span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line">    <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">&#x27;/&#x27;</span>) + <span class="number">1</span>;</span><br><span class="line">    link = link.substring(beginPos, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">            <span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">            <span class="keyword">var</span> src = $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src) &amp;&amp;</span><br><span class="line">               !<span class="regexp">/^\s*\//</span>.test(src)) &#123;</span><br><span class="line">              <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">              <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">              <span class="keyword">var</span> linkArray = link.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">var</span> srcArray = src.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">              &#125;);</span><br><span class="line">              <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">                srcArray.shift();</span><br><span class="line">              src = srcArray.join(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">              $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>, config.root + link + src);</span><br><span class="line">              <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;update link as:--&gt;&quot;</span>+config.root + link + src);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>打开_config.yml文件，修改下述内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>向后引用</title>
    <url>/2020/07/31/%E5%90%91%E5%90%8E%E5%BC%95%E7%94%A8/</url>
    <content><![CDATA[<p>前文中，已经总结了正则表达式中的常用字符、次数匹配、位置匹配等，这篇文章中，我们来了解一下正则中的”分组”与”后向引用”。</p>
<p>什么是分组？什么是后向引用？我们慢慢聊。</p>
<a id="more"></a>

<p>先来说说什么是分组。</p>
<p>算了，思考了半天，我也不知道从何说起，先看个示例吧，根据示例去描述反而更加清晰，示例如下。</p>
<p><img src="/2020/07/31/%E5%90%91%E5%90%8E%E5%BC%95%E7%94%A8/060117_1536_1.png" alt="正则表达式（4）：分组与后向引用"></p>
<p>上述示例中，我们使用到了之前所了解到的”连续次数匹配”，”{2}“表示其前面的字符连续出现的2次，即可被匹配到。</p>
<p>但是，正如上图所示，”{2}“所影响的字符只是其前面的单个字符，也就是上例中的字母o</p>
<p>所以，上例中，helloo被匹配到了，hellooo也被匹配到了，因为”hell”字符串后面的确出现了2次字母o</p>
<p>但是，如果我们想要从上例中的文本中找出，2次连续出现的hello字符串，该怎么办呢？</p>
<p>正如你所看到的，”hello{2}“并不能表示”hellohello”，它只能表示”helloo”，那么，我们该怎么办呢？</p>
<p>这个时候，我们就需要用到”分组”，将”hello”当做一个”分组”，当做一个”整体”，才可以达到我们的目的，示例如下</p>
<p><img src="/2020/07/31/%E5%90%91%E5%90%8E%E5%BC%95%E7%94%A8/060117_1536_2.png" alt="正则表达式（4）：分组与后向引用"></p>
<p>正如上图所示，”(hello)“表示将hello字符串当做一个整体，所以，”{2}“所影响的字符就是前面的”hello字符串”（这个整体）。</p>
<p>所以，”(hello){2}“这个正则表达式就表示hello字符串连续出现两次，也就是”hellohello”</p>
<p>没错，”(  )“就表示分组。</p>
<p>“(  )“表示将其中的内容看做一个分组，看做一个整体。</p>
<p>分组还可以嵌套，什么意思呢？我们来看一个例子。</p>
<p><img src="/2020/07/31/%E5%90%91%E5%90%8E%E5%BC%95%E7%94%A8/060117_1536_3.png" alt="正则表达式（4）：分组与后向引用"></p>
<p>上图中的正则表达式猛一看有些复杂，但是我们一点一点的拆开来看，就比较容易理解了，没错，我们先按照上图所示，将”红线部分”与”蓝线部分”拆成两部分</p>
<p>蓝线部分为”{2}“，表示之前的字符连续出现两次</p>
<p>红线部分为”(ab(ef){2})“，可以看到，红线部分的两侧正好由”(   )“组成，由此可见，红线部分应该作为一个整体，应该作为一个分组被操作，再结合之前的蓝线部分，即可得知，红线部分应该作为一个整体连续出现两次。</p>
<p>那么，我们把红线部分最外侧的”(   )“去掉，红线部分内侧的正则为”ab(ef){2}“，可以看到，红线部分内侧的正则中还有一组分组符号，就是”(ef)“，这个分组符号把ef当做了一个整体，所以，”ab(ef){2}“表示字符串ab后面跟随了2个连续出现的ef，那么，”ab(ef){2}“就表示字符串”abefef”。</p>
<p>逆推回去，我们把红线内侧的正则替换为”abefef”，于是，上例中的正则就表示”(abefef){2}“，最终如上图所示，2次连续出现的abefef被匹配到了。</p>
<p>上例中，红线部分一共包含两个分组符号，最外侧的”(   )“中又包含了另一个”(   )“，这就是分组符号的嵌套。</p>
<p>我想，我应该说清楚了。</p>
<p>那么，我们再来聊聊什么是后向引用。</p>
<p>之所以先介绍分组，是因为后向引用是以分组为前提的，如果想要实现后向引用，则必须先进行分组。</p>
<p>那么”后向引用”是什么意思呢？</p>
<p>如果直接放出概念，我不容易描述，你也不容易理解，我们还是先来看个小例子吧，示例文件如下。</p>
<p><img src="/2020/07/31/%E5%90%91%E5%90%8E%E5%BC%95%E7%94%A8/060117_1536_4.png" alt="正则表达式（4）：分组与后向引用"></p>
<p>如果我们想要使用正则去匹配上述示例中的两行文本，我们改怎么办呢？</p>
<p>我们可以使用如下正则表达式去匹配。</p>
<p><img src="/2020/07/31/%E5%90%91%E5%90%8E%E5%BC%95%E7%94%A8/060117_1536_5.png" alt="正则表达式（4）：分组与后向引用"></p>
<p>“H.{4}“表示大写字母H的后面跟随了4个任意字符，其中”.”表示任意单个字符，我们在前文中已经举例演示过，此处不再赘述。</p>
<p>所以，”H.{4}“既可以匹配到Hello，也可以匹配到Hiiii，那么，上述两行文本都被匹配到了。</p>
<p>此时，我们修改一下示例文件，在示例文件中再添加一行测试文本，修改后的测试文件内容如下</p>
<p><img src="/2020/07/31/%E5%90%91%E5%90%8E%E5%BC%95%E7%94%A8/060117_1536_6.png" alt="正则表达式（4）：分组与后向引用"></p>
<p>如上图所示，我们添加了一行文本，这行文本以Hello开头，以Hiiii结尾。</p>
<p>我们使用刚才的正则，能够匹配到这一行新添加的文本吗，我们来试试。</p>
<p><img src="/2020/07/31/%E5%90%91%E5%90%8E%E5%BC%95%E7%94%A8/060117_1536_7.png" alt="正则表达式（4）：分组与后向引用"></p>
<p>可以看到，新添加的一行文本也被匹配到了，因为”H.{4}“表示大写字母H的后面跟随了4个任意字符，最后一行也满足条件，所以也被匹配到了。</p>
<p>但是此刻，我有了新需求~~</p>
<p>我只想从上例中找出”world”前后单词相同的那些行，换句话说就是，world之前的单词是Hello，world之后的单词也要是Hello，world之前的单词是Hiiii，world之后的单词也要是Hiiii，只有这种行满足条件。</p>
<p>上例中第三行则不满足条件，因为上例的第三行中，world之前的单词是Hello，而world之后的单词是Hiiii，前后不一致，所以不满足我的条件。</p>
<p>那么我该怎么办呢？之前的正则肯定不行，因为之前的正则也能够将上例中的第三行匹配到。</p>
<p>这个时候，就需要用到”后向引用”，示例如下。</p>
<p><img src="/2020/07/31/%E5%90%91%E5%90%8E%E5%BC%95%E7%94%A8/060117_1536_8.png" alt="正则表达式（4）：分组与后向引用"></p>
<p>可以看到，使用上述正则，即可达到我们的目的，只有world前后的单词完全相同时，才会被匹配到。</p>
<p>那么，上例中的正则是什么意思呢？我们仍然拆成两部分来介绍，以便我们理解。</p>
<p>上例的红线部分为：”(H.{4})“</p>
<p>上例的蓝线部分为：”\1”</p>
<p>红线部分的正则与之前示例中的正则只有一点点区别，就是在原来的基础之上添加了分组，将”H.{4}“变成了”(H.{4})“，但是它的大概含义并没有改变，”(H.{4})“表示大写字母H的后面跟随了4个任意字符，并且字母H与后面的4个字符将作为一个整体。那么，为什么要在原来的基础上添加分组呢？这是因为，如果想要实现后向应用，则必须以分组为前提，现在我们暂且不纠结这一点，之后回过头来看，就会明白。</p>
<p>蓝色部分的正则为”\1”，它有什么含义呢？</p>
<p>“\1”表示整个正则中第1个分组中的正则所匹配到的结果，这样说可能不容易理解，我们用大白话说一遍。</p>
<p>在上例中，整个正则中只出现了1个分组，就是”(H.{4})“，当它与示例文件中的第一行文本进行匹配时，会匹配到Hello字符串，这时，”\1”就表示Hello字符串。</p>
<p>当正则”(H.{4})“与示例文件中的第二行文本进行匹配时，会匹配到Hiiii字符串，这时，”\1”就表示Hiiii字符串。</p>
<p>也就是说，”\1”必须与整个正则中第1个分组中的正则（也就是红色部分的正则）所匹配到的结果相同。</p>
<p>换句话说就是，”\1”引用了整个正则中第1个分组中的正则（也就是红色部分的正则）所匹配到的结果。</p>
<p>如果你还没有懂，看图理解吧。</p>
<p><img src="/2020/07/31/%E5%90%91%E5%90%8E%E5%BC%95%E7%94%A8/060117_1536_9.png" alt="正则表达式（4）：分组与后向引用"></p>
<p>现在回头想想，你知道为什么必须为”H.{4}“添加分组了吗？因为，当我们为”H.{4}“添加了分组以后，”H.{4}“就变成了整个正则中第1个分组中的正则，当”H.{4}“匹配到的结果为Hello时，”\1”就引用了Hello，当”H.{4}“匹配到的结果为Hiiii时，”\1”就引用了Hiiii。</p>
<p>这就是所谓的”后向引用”。</p>
<p>上述描述看一遍可能不容易立马理解，可以重复仔细的多看几遍，慢慢就会理解了。</p>
<p>聪明如你，一定想到了。</p>
<p>“\1”表示引用整个正则中第1个分组中的正则所匹配到的结果，那么，”\2”呢？没错，正如你所想。</p>
<p>“\2”表示引用整个正则中第2个分组中的正则所匹配到的结果</p>
<p>示例如下</p>
<p><img src="/2020/07/31/%E5%90%91%E5%90%8E%E5%BC%95%E7%94%A8/060117_1536_10.png" alt="正则表达式（4）：分组与后向引用"></p>
<p>如上图所示，”\2”引用了上图中”绿线部分的正则”所匹配到的结果，而上图中”绿线部分的正则”就是”整个正则表达式中第2个分组中的正则”。</p>
<p>那么，以此类推，”\3”、”\4”、”\5”、”\6”所表达的意思就不言而喻了。</p>
<p>再次强调，使用后向引用的前提是将需要引用的部分分组。</p>
<p>不过，当分组嵌套时，我们应该怎样区分哪个分组是第1个分组，哪个分组是第2个分组呢？</p>
<p>我们通过一个小示例，即可明白，为了尽量简化整个正则，我们直接将一些字符分组即可，示例如下。</p>
<p><img src="/2020/07/31/%E5%90%91%E5%90%8E%E5%BC%95%E7%94%A8/060117_1536_11.png" alt="正则表达式（4）：分组与后向引用"></p>
<p>上述正则表达式中，一共出现了两个分组，一个分组嵌套着另一个分组。</p>
<p><img src="http://www.zsythink.net/wp-content/themes/begin/img/blank.gif" alt="正则表达式（4）：分组与后向引用"></p>
<p>可以从上图中看出，红色标注的符号是一对分组符号，蓝色标注的符号是一对分组符号，红色分组嵌套这蓝色分组。</p>
<p>虽然上例中没有使用到”后向引用”，但是，当我们需要使用”后向引用”时，这两个分组哪个才是第1个分组，哪个是第2个分组呢？</p>
<p>当我们需要使用后向引用时，红色分组为第1个分组，蓝色分组为第2个分组。</p>
<p>换句话说就是，当使用后向引用时，”\1”引用的是红色分组所匹配的结果，”\2”引用的是蓝色分组所匹配的结果。</p>
<p>为什么呢？原因就是，分组的顺序取决于分组符号的左侧部分的顺序，如下图所示</p>
<p><img src="/2020/07/31/%E5%90%91%E5%90%8E%E5%BC%95%E7%94%A8/060117_1536_13.png" alt="正则表达式（4）：分组与后向引用"></p>
<p>由于红色分组的左侧部分排在最前面，所以红色分组是整个正则中的第1个分组。</p>
<p>由于蓝色分组的左侧部分排在第2位，所以蓝色分组是整个正则中的第2个分组。</p>
<p>注意：排序时也仅仅按照分组符号的左侧部分排序，分组符号的右侧部分不算在排序范围内。</p>
<p>好了，”分组”与”后向引用”就总结到这里，我想我应该说明白了，描述起来好费力<del>~</del>希望能够帮到你。</p>
<p>之前说过，在Linux中，正则表达式分为基础正则表达式与扩展正则表达式。</p>
<p>而我们之前所描述的符号都属于基本正则表达式。</p>
<p>在以后的文章中，我们会接触到扩展正则表达式，但是不用害怕，它们的用法都是相似的，而且写法也差不多，学会基本正则表达式以后，再学习扩展正则表达式，几乎不会费力。</p>
]]></content>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
</search>
